// globally defined variable
$sectionToLessonMap = array();
$lessonToQuestionsMap = array();

function create_quizzes() {
	read_csv("sample_questions.csv", "quiz");
}
function create_lessons_and_courses() {
 	read_csv("lesson_materials_section.csv", "lesson");
	read_csv("same_course_material.csv", "course");
}
function read_csv($file_name, $type) {
    print "READING CSV\n";
    //file mapping from our File Manager
	$fileName = "/home/freewaydns-dev108/cd-test-docs/{$file_name}";
	$file = fopen($fileName, 'r');
	$dataArray = array();
 	$headerLine = true;
	while (($line = fgetcsv($file)) !== FALSE) {
        // check header line and if so store for the column names
	    if($headerLine) {
	        $headerLine = false;
	        $mappingLine = $line;
	        continue;
	    }
        // loop through the column values in one row
        $count = 0;
        $tempArray = array();
        // create mapping based on header
        foreach($line as $value) {
			$tempArray[$mappingLine[$count++]] = $value;
        }
		if ($type == "lesson") {
            create_lesson_from_csv($tempArray);
        }
        else if ($type == "course") {
            create_course_from_csv($tempArray);
        } else {
            create_question_from_csv($tempArray);
        }
	}
	fclose($file);
	global $sectionToLessonMap;

	print "What does the sections map look like?";
	print_r($sectionToLessonMap);

	print "COMPLETED CSV READING\n";
}

function generate_lesson_file_string($attachment, $course_id) {

    $path2 = "{\"error\":\"\",\"path\":\"/home/freewaydns-dev108/htdocs/dev108.freewaydns.net/wp-content/uploads/course_materials/{$course_id}/{$attachment}\",\"url\":\"https://dev108.freewaydns.net/wp-content/uploads/course_materials/{$course_id}/{$attachment}\"}";

    $file_data2 = json_encode(array(
            "lesson_files" => $path2,
            "lesson_files_label" => $attachment
        ));
   echo "THE JSON STRING";
   echo $file_data2;
   return "[{$file_data2}]";
}

function create_lesson_from_csv($lessonData) {
    $wpdata['post_title'] = $lessonData['lesson_name'];
    $wpdata['post_status'] ='publish';
    if ($lessonData['lesson_type'] == 'quiz') {
        $wpdata['post_type'] = 'stm-quizzes';
        $wpdata['post_content'] = $lessonData['summary'];
    } else {
        $wpdata['post_type'] = 'stm-lessons';
    }
    $lesson_post_id = wp_insert_post( $wpdata );

    // add section ID to the section map
    global $sectionToLessonMap;

    $sectionID = $lessonData['section_id'];

    if (!array_key_exists($sectionID, $sectionToLessonMap)) {
		echo "creating section " . $sectionID;
// 		$sectionToLessonMap[$sectionID] = "{$lessonData['section_name']} {$lesson_post_id}";
        $sectionToLessonMap[$sectionID] = array("{$lessonData['section_name']}", "{$lesson_post_id}");
    } else {
// 		 $sectionToLessonMap[$sectionID] .= " {$lesson_post_id}";
        array_push($sectionToLessonMap[$sectionID], "{$lesson_post_id}");
    }

    if ($lessonData['lesson_type'] == 'video' ) {
        update_post_meta($lesson_post_id, 'duration', $lessonData['duration']);
        update_post_meta($lesson_post_id, 'type', $lessonData['lesson_type']);
        $video_type = strtolower($lessonData['video_type']);
        update_post_meta($lesson_post_id, 'video_type', $video_type);
        update_post_meta($lesson_post_id, "lesson_{$video_type}_url", $lessonData['video_url']);
    }
    if ($lessonData['lesson_type'] == 'other') {
         update_post_meta($lesson_post_id, 'type', 'text');
         $file_path =  generate_lesson_file_string($lessonData['attachment'], $lessonData['course_id']);
         update_post_meta($lesson_post_id, 'lesson_files_pack', wp_slash($file_path));
    }
    if ($lessonData['lesson_type'] == 'audio') {
          update_post_meta($lesson_post_id, 'duration', $lessonData['duration']);
          update_post_meta($lesson_post_id, 'type', 'video');
          update_post_meta($lesson_post_id, 'video_type', 'ext_link');
          update_post_meta($lesson_post_id, 'lesson_ext_link_url', $lessonData['audio_url']);
    }
    if ($lessonData['lesson_type'] == 'quiz') {
          global $lessonToQuestionsMap;
          update_post_meta($lesson_post_id, 'correct_answer', 'on');
          update_post_meta($lesson_post_id, 'passing_grade', '100');
          update_post_meta($lesson_post_id, 're_take_cut', '0');
          update_post_meta($lesson_post_id, 'quiz_style', 'global');
          $questionArray = $lessonToQuestionsMap[$lessonData['id']];
          $questionString = implode(",", $questionArray);
          echo $questionString;
          update_post_meta($lesson_post_id, 'questions', $questionString );
    }
}

function create_course_from_csv($courseData) {
    // Create array of Course info from CSV data
	$wpdata['post_title'] = $courseData['title'];
// 	$wpdata['post_content'] = $courseData['description'];
	$wpdata['post_excerpt'] = $courseData['short_description'];
	$wpdata['post_status'] ='publish';
	$wpdata['post_type'] = 'stm-courses';

    $curriculum_string = "";
	$combinedArray = array();
	$sectionString = $courseData['section'];
	$sectionArray = create_array_from_string($sectionString, ",");

    global $sectionToLessonMap;

	foreach ($sectionArray as $sectionID) {
		if ($sectionToLessonMap[$sectionID]) {
			$combinedArray = array_merge($combinedArray, $sectionToLessonMap[$sectionID]);
		}
    }

	echo "COMBINED";
	print_r($combinedArray);
	$curriculum_string = implode(",", $combinedArray);
    echo $curriculum_string;
	$course_post_id = wp_insert_post( $wpdata );
	update_post_meta($course_post_id, 'price', $courseData['price_usd']);
	update_post_meta($course_post_id, 'curriculum', $curriculum_string);
}

function create_array_from_string($sectionString, $delimiter) {
	$sectionString = trim($sectionString, '[');
    $sectionString = trim($sectionString, ']');
    $sectionString = trim($sectionString, ' ');
    $sectionString = trim($sectionString, '"');
    $sectionArray = explode($delimiter, $sectionString);
    return $sectionArray;
}

function create_question_from_csv($questionData) {
    global $lessonToQuestionsMap;

    $wpdata['post_title'] = $questionData['title'];
    $wpdata['post_status'] ='publish';
    $wpdata['post_type'] = 'stm-questions';
    $question_post_id = wp_insert_post( $wpdata );
    $quiz_id = $questionData['quiz_id'];

    // save question ID to quiz
    if (!array_key_exists($quiz_id, $lessonToQuestionsMap)) {
 		$lessonToQuestionsMap[$quiz_id] = array($question_post_id);
    } else {
        array_push($lessonToQuestionsMap[$quiz_id], $question_post_id);
    }

    // add metadata for question
    if ($questionData['type'] == 'multiple_choice') {
        update_post_meta($question_post_id, 'type', 'multi_choice');
    } elseif ($questionData['type'] == 'matching')  {
        update_post_meta($question_post_id, 'type', 'item_match');
    } else {
       update_post_meta($question_post_id, 'type', $questionData['type']);
    }

    $answers = array();
    if ($questionData['type'] != 'matching')  {
        // if not matching
        $count = 1;
        $options = create_array_from_string($questionData['options'], '","');
        //print_r($options);
        $isCorrect = $questionData['correct_answers'];
        foreach ($options as $option) {
            $option = trim($option, "\"");
            $optionArray["text"] = $option;
            $optionArray["isTrue"] = str_contains($isCorrect, $count++) ? "1" : "0";
            array_push($answers, $optionArray);
        }
    }
	else {
        $matching_data = $questionData['options'];
        $questionKey  = '"questions":';
        $optionKey = '"options":';
        $qPos = stripos($matching_data, $questionKey);
        $oPos = stripos($matching_data, $optionKey);
        $questionString = substr($matching_data, $qPos+12, $oPos-14);
        $optionString = substr($matching_data, $oPos+10, -1);

        $questions = create_array_from_string($questionString, '","');
        $options = create_array_from_string($optionString, '","');

		$arrLength = count($questions);
		echo "HERE WE ARE";
		echo $arrLength;
        $correctAnswers = create_array_from_string($questionData['correct_answers'], '","');

        for($x = 0; $x < $arrLength; $x++) {
			echo $x;
 			$correctAnswer = $correctAnswers[$x];
 			echo $correctAnswer;
            $optionArray["question"] = $questions[$x];
            $optionArray["text"] = $options[$correctAnswer - 1];
            $optionArray["isTrue"] = 0;
            array_push($answers, $optionArray);
        }
    }
    update_post_meta($question_post_id, 'answers', $answers);
}


function create_hardcoded_question() {
    $wpdata['post_title'] = "TITLE";
    $wpdata['post_status'] ='publish';
    $wpdata['post_type'] = 'stm-questions';
    $question_post_id = wp_insert_post( $wpdata );
    update_post_meta($question_post_id, 'type', 'multi_choice');

    $answers = array();
    $count = 1;
    $options = array("OPTION 1", "OPTION 2", "OPTION 3");

    $isCorrect = "[1, 3]";
    foreach ($options as $option) {
        $optionArray["text"] = $option;
        $optionArray["isTrue"] = str_contains($isCorrect, $count++) ? "1" : "0";
        array_push($answers, $optionArray);
    }

    update_post_meta($question_post_id, 'answers', $answers);
}